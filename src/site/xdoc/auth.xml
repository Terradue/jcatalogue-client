<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011-2012 Terradue srl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>JCatalogue Client</title>
    <author email="info@terradue.com">Terradue srl</author>
  </properties>

  <body>
    <section name="Authentications">
      <subsection name="HTTP Authentication">
        <p>It often happens that both <i>OpenSearch</i> server and resources server are protected by HTTP
        authentication, so the client supports the registration of different realms:</p>

        <source>CatalogueClient client = new CatalogueClient();
client.registerRealm( "eo-virtual-archive4.esa.int", "username", "password", true, HttpAuthScheme.BASIC );</source>
      </subsection>

      <subsection name="SSL authentication support">
        <p>If <i>OpenSearch</i> server and resources server require authentication via SSL certificates, the client
        allows registering private/public key:</p>

        <source>CatalogueClient client = new CatalogueClient();
client.registerSSLCerificates( new File( "/user/home/user/.ssh/user-cert.pem" ),
                               new File( "/user/home/user/.ssh/user-key.pem" ),
                               "password" );</source>

        <p>Users can register their Proxy certificate as well</p>

        <source>CatalogueClient client = new CatalogueClient();
client.registerSSLCerificates( new File( "/user/home/user/.ssh/user-proxy" ) );</source>
      </subsection>

      <subsection name="Shibboleth UM-SSO">
        <p>Even if with a little hack-ish solution, the client supports Shibboleth UM-SSO as well for batch processing:
        users have to configure login form link and related parameters so, everythime a resource is protected by UM-SSO,
        the client will automatically - and transparently - handle the authentication request:</p>

        <source>CatalogueClient client = new CatalogueClient();
client.registerUmSsoCredentials( URI.create( "https://eo-sso-idp.eo.esa.int/idp/umsso20/login" ),
                                             HttpMethod.POST,
                                             new Parameter( "cn", "username" ),
                                             new Parameter( "password", "XXXXX" ),
                                             new Parameter( "idleTime", "oneday" ),
                                             new Parameter( "sessionTime", "untilbrowserclose" ),
                                             new Parameter( "loginFields", "cn@password" ),
                                             new Parameter( "loginMethod", "umsso" ) );</source>
      </subsection>
    </section>
  </body>

</document>
