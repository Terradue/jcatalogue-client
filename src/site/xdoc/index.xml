<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Terradue srl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>JCatalogue Client</title>
    <author email="info@terradue.com">Terradue srl</author>
  </properties>

  <body>
    <section name="Catalogue Java APIs">
      <p>This project aims to maintain a REST client APIs set for <i>OpenSearch Geo and Temporal protocol</i>servers.</p>

      <subsection name="Obtaining a Client instance">
        <p>The main entry point is querying the Catalogue accessing to the main <i>OpenSearch</i> description:</p>

        <source>import com.terradue.jcatalogue.client.*;

final CatalogueClient client = new CatalogueClient();

CatalogueDescription catalogueDescription = client.discover( "http://eo-virtual-archive4.esa.int/search/description" );</source>
      </subsection>

      <subsection name="The OpenSearch meta data">
        <p>Once obtained a <code>CatalogueDescription</code> instance, users can now access (via getters) to search
        metadata, such as:</p>

        <ul>
          <li>short name;</li>
          <li>long name;</li>
          <li>description;</li>
          <li>tags;</li>
          <li>contact;</li>
          <li>developer;</li>
          <li>attribution;</li>
          <li>syndication right;</li>
          <li>adult content flag;</li>
          <li>language;</li>
          <li>input encoding;</li>
          <li>output encoding.</li>
        </ul>

        <p>The next step is accessing to the OpenSearch URL templates, which describe the how to query the server to
        obtain a <code>Catalogue</code> instance:</p>

        <source>for ( OpenSearchUrl url : catalogueDescription.getOpenSearchUrls() )
{
    System.out.printf( "%s) %s%n", url.getType(), url.getBaseUrl() );

    for ( OpenSearchParameter parameter : url.getParameters() )
    {
        System.out.printf( "    Key: %s, parameter: %s, mandatory: %s%n",
                           parameter.getKey(), parameter.getType(), parameter.isMandatory() );
    }
}</source>

        <p><span class="label notice">Notice</span>: the <b>standard</b> Atom protocol
        (<code>application/xml+atom</code>) is supported by default by the client.</p>
      </subsection>

      <subsection name="Accessing to the Catalogue">
        <p>From a <code>CatalogueDescription</code> is very easy accessing to a <code>Catalogue</code>:</p>

        <source>Catalogue catalogue = catalogueDescription.getCatalogue();</source>

        <p><code>Catalogue</code> instances allow access (via getters) to meta informations such as:</p>
        <ul>
          <li>title;</li>
          <li>subtitle;</li>
          <li>content;</li>
          <li>published;</li>
          <li>updated;</li>
          <li>id;</li>
          <li>total results;</li>
          <li>start index;</li>
          <li>items per page.</li>
        </ul>

        <p>Users that need  accurate filter, have to pass parameters to perform:</p>

        <source>Catalogue catalogue = catalogueDescription.getCatalogue( new Parameter( "startPage", "2" ), ... );</source>

        <p>where parameters are defined in the section above.</p>

        <p>Simple pagination feature is offered in the <code>Catalogue</code> class:</p>

        <source>while ( catalogue.hasMoreResults() )
{
    Catalogue next = catalogue.getNextResults();
}</source>
      </subsection>

      <subsection name="Accessing to the Series">
        <p><code>Series</code> can be accessed from a <code>Catalogue</code> instance:</p>

        <source>for ( Serie serie : catalogue )
{
    // put your code here
}</source>

        <p><code>Serie</code> instances allow access (via getters) to meta informations such as:</p>
        <ul>
          <li>title;</li>
          <li>subtitle;</li>
          <li>content;</li>
          <li>published;</li>
          <li>updated;</li>
          <li>id;</li>
          <li>total results;</li>
          <li>start index;</li>
          <li>items per page.</li>
        </ul>

        <p>Simple pagination feature is offered in the <code>Serie</code> class:</p>

        <source>while ( serie.hasMoreResults() )
{
    Serie next = serie.getNextResults();
}</source>

        <p>If series URLs are already known, users can access to <code>Serie</code> instances directly from the
        <code>CatalogueClient</code>:</p>

        <source>Serie serie = client.getSerie( "http://catalog.gpod.terradue.int/catalogue/gpod/ASA_WSM_1P/ASA_WSM_1PNPDE20111103_193813_000001713108_00171_50616_5757.N1/xml" )</source>

        <p>and optionally can pass <code>Parameter</code>s instances.</p>
      </subsection>

      <subsection name="Accessing to the DataSets">
        <p><code>DataSet</code> instances can be accessed from a <code>Serie</code> instance:</p>

        <source>for ( DataSet dataset : serie )
{
    // put your code here
}</source>

        <p><code>DataSet</code> instances allow access (via getters) to meta informations such as:</p>
        <ul>
          <li>title;</li>
          <li>subtitle;</li>
          <li>updated;</li>
          <li>begin position;</li>
          <li>end position;</li>
          <li>geo location.</li>
        </ul>
      </subsection>
    </section>

    <section name="Related GeoData">
      <p><code>DataSet</code> geo location can be of various formats:</p>
      <ul>
        <li>box;</li>
        <li>line;</li>
        <li>point;</li>
        <li>polygon.</li>
      </ul>
      <p>Classes that represent this format are contained in the subpackage
      <code>com.terradue.jcatalogue.client.geo</code>:</p>
      <ul>
        <li>Box;</li>
        <li>Line;</li>
        <li>Point;</li>
        <li>Polygon.</li>
      </ul>
    </section>

    <section name="Downloading DataSets">
      <p>DataSets download can be invoked directly in the <code>DataSet</code> instance:</p>

      <source>import com.terradue.jcatalogue.client.download.*;

dataSet.download( new File( "/tmp" ), new DownloadHandler()
{

    @Override
    public void onSuccess( File file )
    {
        check( file.exists() );
        extractAndProcess( file );
    }

    @Override
    public void onWarning( String message )
    {
        System.out.printf( "[WARNING] %s%n",  message );
    }

    @Override
    public void onError( String message )
    {
        log( message );
    }

    @Override
    public void onError( Throwable t )
    {
        log( t );
    }

    @Override
    public void onFatal( String message )
    {
        fail( message );
    }

} );</source>

      <p>the first argument of the <code>download</code> method is the target directory where users intend download
      the dataset, the secondi argument is an handler useful to implement callbacks on errors and success.</p>

      <subsection name="Downloaders">
        <p><code>DataSet</code> instances allow downloading the associated media file, that is usually enlisted
        in the <code>enclosure</code> URL type.</p>

        <p>Each <code>DataSet</code> could have more that one <code>enclosure</code> URL, so the client will iterate
        over them until it can download the media file - or URLs are exhausted</p>

        <p>By default, the client provides support for <code>http(s)</code> only, downloaders for different protocols
        need to be provided.</p>

        <p>It is possible to plug <code>Downloader</code>s by two way:</p>

        <ul>
          <li><i>explicit</i>: by associating the <code>Downloader</code> instance to a related protocol:
            <source>client.registerDownloader( "ftp", new MyFtpDownloader() );</source>
          </li>
          <li><i>implicit</i>: by annotating the <code>Downloader</code> class with
          <code>@com.terradue.jcatalogue.client.download.Protocol</code> annotation, where specified the protocol(s)

          <source>@Protocol({ "ftp", "sftp" })
public final class MyFtpDownloader
    implements Downloader
{

    @Override
    public void download( File targetDir, URI fileUri, DownloadHandler handler )
    {
        // your implementation here
    }

}</source>

          then registering the instance (omitting the protocols):

          <source>client.registerDownloader( new MyFtpDownloader() );</source></li>
        </ul>
      </subsection>
    </section>
  </body>

</document>
